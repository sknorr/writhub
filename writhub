#!/bin/bash
#0 a   |b  |c  |d   |e   |f |g  |h  |i |j|k  |l|m    |n   |o  |p   |q  |r |s |t |u  |v  |w   |x  |y  |z  |@     |1 |2  |3  |4  |5  |6  |7  |8  |9  |0  |.|?  |!|- |*     |#
#1      #          #      .##    #   .# .##   #                                                                   # .##..##.  # ####  .##### ##..##. ##.  .##.#    .#####.#
#2      #          #      #      #        #   #                               #                           .#. .#.## #  #.  # ## #   .# .   ##  ##  ##  #     ##    #     ##
#3 ###. ###..###.### .###.###.######..# .## .## #.#.#.#.## .##.#.##..#### #.#.## #  ##  ##   ##  ##. ####.####### #    #   ## # #   #     # #  ##  ## .#     ##    # # # ##
#4  .## #  ##   #  # # .# #  #  ##  # #  ###  #  # # # #  ##  # #  ##  ### #. #  #  ##  ## . # #.  # #  # ####.## #   #  .#.#######.###. #   ## .#### .#   ## # ####     ##
#5 #  # #  ##   #  # ##   #  .####  # #  ## # #  # # # #  ##  # #  ##  ##   ###  #  #.# ## # # ##.  ## #   #####  #  #     #  #    ##  ##   #  #   ##. #   #  #    # ### ##
#6 .##.####..###.##.#.### #     ##  #### ##  #.# # # # #  #.##. ###..####  ##..## ###  #  # # #  #   #####   #    # #      #  #    ##  ##   #  #  # #  #           #     ##
#7                        #  .##.       #.                      #      #                           .#.           #######.##.  # .##..##.#   .##. #  .##.#  #  #    .#####.#

me="$(test -L $(realpath $0) && readlink $(realpath $0) || echo $(realpath $0))"
mydir="$(dirname $me)"

level0=0
level1=1
level2=4
level3=8
level4=12
configfile="writhub.stringalong"
spaces="       "

verbs=$(cat $mydir/verbs)
conjunctions=$(cat $mydir/conjunctions)
articles=$(cat $mydir/articles)
pronouns=$(cat $mydir/pronouns)
adjectives=$(cat $mydir/adjectives)
nouns=$(cat $mydir/nouns)

function echsit() {
  >&2 echo "$1"
  exit 1
}

# --- Get the string to type out

function readfont() {
  rawfont=$(sed -rn '/#!/{n; p; :loop n; p; /^[ \t]*$/q; b loop}' $0 | sed -r -e 's/^# ?//')
  index=$(echo -e "$rawfont" | head -1)
  font=$(echo -e "$rawfont" | tail -7)
}

function getchar() {
  # $1 - desiredchar
  char=$(echo -n "$1" | sed -r 's/[^-.!?@*a-z0-9]//')
  [[ "$char" ]] || echsit "Character '$1' is unsupported. Duh."
  relevant=$(echo "$index" | sed -r "s/^(0.*[${char}] *\|).*/\1/")
  start=$(echo -n "$relevant" | sed -r "s/^(0.*[${char}]).*/\1/" | wc -c)
  end=$(echo -n "$relevant" | wc -c)
  asciichar=
  for i in $(seq 1 7); do
    asciichar+=','$(echo -e "$font" | sed -n "${i} p" | cut -b ${start}-${end})
  done
  asciivertical=
  # $end - $start and cut instead maybe? then i could also leave away the stupid
  # commas
  while [[ $(echo "$asciichar" | sed 's/,//g') ]]; do
    asciivertical+=$(echo "$asciichar" | sed -r -e 's/,([^,])[^,]*/\1/g')
    asciichar=$(echo "$asciichar" | sed -r -e 's/(,)[^,]([^,]*)/\1\2/g')
  done
  echo "$asciivertical"
}

function composestring() {
  # $1 string to ASCIIize
  textstring=
  input=$(echo -n "$1" | sed -r 's/([A-Z])/\L\1/g')
  output="$input"
  while [[ "$input" ]]; do
    this=$(echo "$input" | cut -b 1)
    if [[ "$this" == ' ' ]]; then
      textstring+="$spaces$spaces$spaces"
    else
      textstring+=$(getchar "$this")"$spaces"
      [[ $? -gt 0 ]] && echsit "Mere Peasant! You do not deserve a config file."
    fi
    input=$(echo "$input" | cut -b 2-)
  done
  echo "|$textstring" >> "$configfile"
  echo -e "The following output string was added to $configfile:\n$output"
}

#--- Git functionality

function getword() {
  #$1 words to pick from, space-separated
  words=$(echo -e "$1" | sed 's/ /\n/g')
  listlength=$(echo -e "$words" | wc -l)
  rando=$(($RANDOM % ($listlength)))
  echo "$words" | sed -n "$((${rando} + 1)) p" | sed 's/_/ /g'
}

function camelcase() {
  echo $(getword "$nouns")' '$(getword "$nouns") | sed -r -e 's/^./\U&/' -e 's/ (.)/\U\1/g'
}

function commitmessage() {
  commitstyle=$(($RANDOM % 7))
  addnumber=$(($RANDOM % 6))
  isrevert=$(($RANDOM % 35))
  date=$(date +%j | sed -r 's/^0+//')
  [[ $date -lt 50 ]] && date="50"
  issue=$(($RANDOM % $date))
  msg=
  if [[ $commitstyle -eq 0 ]]; then
    msg=$(getword "$verbs")" "$(getword "$nouns")
  elif [[ $commitstyle -eq 1 ]]; then
    msg=$(getword "$verbs")" "$(getword "$articles")" "$(getword "$adjectives")" "$(getword "$nouns")
  elif [[ $commitstyle -eq 2 ]]; then
    msg=$(getword "$verbs")" and "$(getword "$verbs")" "$(getword "$adjectives")" "$(getword "$nouns")
  elif [[ $commitstyle -eq 3 ]]; then
    msg=$(getword "$verbs")" "$(getword "$pronouns")" "$(getword "$adjectives")" "$(getword "$nouns")
  elif [[ $commitstyle -eq 4 ]]; then
    msg=$(getword "$verbs")" "$(getword "$pronouns")" "$(camelcase)
  elif [[ $commitstyle -eq 5 ]]; then
    msg=$(getword "$verbs")" "$(getword "$adjectives")" "$(getword "$nouns")" "$(getword "$conjunctions")" "$(getword "$nouns")
  elif [[ $commitstyle -eq 6 ]]; then
    msg="Do stuff"
  fi
  number=
  [[ $addnumber -eq 2 ]] && number=" (fix for #${issue})"
  [[ $addnumber -eq 3 ]] && number=" (fixes #${issue})"
  [[ $addnumber -eq 4 ]] && number=" (also fixes #${issue})"
  [[ $addnumber -eq 5 ]] && number=" (WIP)"
  if [[ $isrevert -eq 8 ]]; then
    echo -e "Revert \"$(echo $msg$number | sed -r 's/^./\U&\L/')\"\n\nThis reverts commit $RANDOM$RANDOM$RANDOM$RANDOM"
  else
    echo "$msg$number" | sed -r 's/^./\U&\L/'
  fi
}

function generatefiles() {
  thefile="randy.py"
  touch $thefile
  echo $(getword "$nouns")" "$(getword "$verbs")" "$(getword "$nouns") >> $thefile
  stupid=$(($RANDOM % 35))
  [[ $stupid -eq 12 ]] && sed -i -r 's/ / :/g' $thefile
  [[ $stupid -eq 22 ]] && sed -i -r 's/i/a/g' $thefile
  [[ $stupid -eq 32 ]] && sed -i -r 's/e/uiuiui/g' $thefile
  git add $thefile >/dev/null 2>/dev/null
}

function makecommit() {
  generatefiles
  git commit -a -m "$(commitmessage)" >/dev/null 2>/dev/null
}

if [[ $1 == '--compose' ]] && [[ "$2" ]]; then
  readfont
  composestring "$2"
  if [[ ! -f '.gitignore' ]]; then
    echo "$configfile" > .gitignore
    git add .gitignore && git commit -m "Add gitignore"
  fi
  echo "You done good, son. This'll last for "$(cat $configfile | wc -c)" days."
  exit
fi

if [[ $1 == '--drudgery' ]] && [[ -d "$2" ]]; then
  cd $2

  [[ -f "$configfile" ]] || echsit "Use --compose MESSAGE to create a configuration."
  [[ $(cat "$configfile") ]] || echsit "$configfile is empty. I declare victory."
  cfg=$(cat "$configfile")
  # first commit needs to be made on a Sunday
  if [[ $(echo "$cfg" | cut -b 1) == '|' ]]; then
    [[ $(date +%w) == 0 ]] || exit
    cfg=$(echo "$cfg" | cut -b 2-)
  fi
  todaysbyte=$(echo "$cfg" | cut -b 1)
  commits=0
  [[ $todaysbyte = '.' ]] && commits="$level2"
  [[ $todaysbyte = '#' ]] && commits="$level4"
  if [[ ! $commits -eq 0 ]]; then
    for i in [[ $(seq 1 $commits) ]]; do
      makecommit
    done
    [[ "$3" == '--no-push' ]] || git push >/dev/null 2>/dev/null
  fi

  echo "$cfg" | cut -b 2- > "$configfile"
  exit
fi

echo "You should not be here.  Forgot a parameter?"
echo "Either set a new string: $0 --compose MESSAGE_STRING"
echo "Or run daily task:       $0 --drudgery GIT_REPO_DIR"
